//Breadth First Search

#include <stdio.h>
#include <stdlib.h>
int front = -1, rear = -1, A[5], status[5], N=5;
int G[5][5];

void insert(int item)
{
    if(front == -1) front = rear = 0;
    else rear ++;
    A[rear] = item;
}

void dele()
{
   printf("%d->", A[front]);
    if(front == rear) front = rear = -1;
    else front ++;
}

void BFS(int p)
{
    int i, k;
    insert(p);
    status[p] = 2;
    while(front != -1 && rear != -1){
        status[A[front]] = 3;
        k = A[front];
        dele();
        for(i=0; i<N; i++)
{   
        if(G[k][i] == 1 && status[i] == 1)
     {
         insert(i);
        status[i] = 2;
        }
    }
}
void BST()
{
    int i;
    for(i=0; i<N; i++) status[i] = 1;
    for(i=0; i<N; i++)
    if(status[i] == 1) BFS(i);
}

int main()
 {
printf("Enter the adjacency matrix:\n");
    for(int i=0; i<5; i++)
    for(int j=0; j<5; j++)
scanf("%d", &G[i][j]);
  BST();
  return 0;
}

//Depth First Search

#include<stdio.h>
#include<stdlib.h>
 int top=-1,A[5],status[5],N=5;
 int G[5][5]={{0,0,0,0,1},{0,0,0,0,0},{0,0,0,1,0},{1,1,0,0,0},{0,0,1,1,0}};
void push(int item)
{
 top=top+1;
 A[top]=item;
}
void pop()
{
 printf("%d->",A[top]);
  top=top-1;
}
 void DFS(int p)
{
 int i,k;
 for(i=0;i<N;i++)
 status[i]=1;
 push(p);
 status[p]=2;
 while(top!=-1)
{
status[A[top]]=3;
k=A[top];
pop();
for(i=0;i<N;i++)
{
if(G[k][i]==1&&status[i]==1)
{
push(i);
status[i]=2;
}
}
}
}
int main()
{
DFS(0);
return 0;
}

